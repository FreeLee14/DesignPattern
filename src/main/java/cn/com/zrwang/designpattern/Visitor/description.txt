Visitor（访问器模式）：有时开发过程中存在着，一开始设定好的父类，已经有许多子类继承该父类，但是由于最开始设计时未考虑周全，父类需要新增方法
                     这时会导致许多子类都需要重写该方法，首先这已经违背了开闭原则，其次也会带来损坏现有代码结构的风险。

                     此时为了规避修改现有代码，将原有父类的所有方法采用拓展的思想，抽象到另外一个Visitor类中，父类方法只保留一个方法
                     并接收Visitor基类，具体的方法实现由Visitor的子类实现，原来父类的所有子类会在运行时确定要执行哪个方法，这种模式存在
                     双重派发（多态）的机制，从而相对提高了整个设计的灵活性，但是这种模式有一种很致命的缺陷即：要一开始确定好父类的子类
                     的数量，只有这一层结构确定了之后，才能使用访问器模式，否则如果后续还有新增子类，那么对于Visitor类来说，将会违背
                     开闭原则，因为也要新增新的动作。